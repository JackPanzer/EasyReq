package interfaz;

import clases.*;
import java.awt.MediaTracker;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileView;
import javax.swing.plaf.FileChooserUI;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Text;

/**
 *
 * @author Cervantes
 */
public class Interfaz extends javax.swing.JFrame implements Observer
{
    private ArrayList<DefaultMutableTreeNode> cosas_creadas;
    private Documento doc;
    private JMenuItem Editar=new JMenuItem("Editar Elemento");
    private JMenuItem Paso=new JMenuItem("Nuevo Paso");
    private JMenuItem Excepcion=new JMenuItem("Nueva Excepci√≥n");
    private JMenuItem Nodo=new JMenuItem("Nueva Seccion/Apendice");
    private JMenuItem Eliminar=new JMenuItem("Eliminar");
    private Arbol arb;//contendra nuestro arbol del documento
    private boolean modificado;//Informara si el documento tiene todos los cambios en el fichero
    
    /** Creates new form Interfaz */
    public Interfaz() {
        initComponents();
        this.cosas_creadas=new ArrayList<DefaultMutableTreeNode>();
        this.doc=new Documento();
        this.getArbol().setCellRenderer(new IconosJTree());
        jtxpInfo.setContentType("text/html");
        jtxpInfo.setText("<div align=\"center\"><h1>"+
                "OnubaSoftware EasyReq"+
                "</h1></div>");
        this.Editar.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent ae) 
            {
                EditarActionPerformed(ae);
            }
        });
        
        this.Nodo.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent ae) 
            {
                jbtNuevoNodoActionPerformed(ae);
            }
        });
        this.Paso.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent ae) 
            {
                jbtPasoActionPerformed(ae);
            }
        });
        this.Excepcion.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent ae) 
            {
                jbtExcepcionActionPerformed(ae);
            }
        });
        this.Eliminar.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                EliminarActionPerformed(ae);
            }
        });
        
        ImageIcon img=new ImageIcon("src/Icons/escudo-informatica.png");
        if(img.getImageLoadStatus()==MediaTracker.ERRORED)
            img=new ImageIcon("Icons/escudo-informatica.png");
        this.setIconImage(img.getImage());
        this.setModificado(false);
        
        this.arb=new Arbol(((DefaultMutableTreeNode)this.getArbol().getModel().getRoot()).getUserObject().toString());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPopupMenu = new javax.swing.JPopupMenu();
        jToolBar1 = new javax.swing.JToolBar();
        jbtNuevo = new javax.swing.JButton();
        jbtAbrir = new javax.swing.JButton();
        jbtGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jToolBar2 = new javax.swing.JToolBar();
        jbtPortada = new javax.swing.JButton();
        jbtNuevoNodo = new javax.swing.JButton();
        jbtObjetivo = new javax.swing.JButton();
        jbtConflicto = new javax.swing.JButton();
        jbtParticipante = new javax.swing.JButton();
        jbtRequisito = new javax.swing.JButton();
        jbtnReqInfo = new javax.swing.JButton();
        jbtMatrizRast = new javax.swing.JButton();
        jbtnReunion = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jbtActor = new javax.swing.JButton();
        jbtUseCase = new javax.swing.JButton();
        jbtPaso = new javax.swing.JButton();
        jbtExcepcion = new javax.swing.JButton();
        jbtnGlosario = new javax.swing.JButton();
        jbtnFich_grafico = new javax.swing.JButton();
        jbtnParrafo = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtDocumento = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxpInfo = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmiNuevo = new javax.swing.JMenuItem();
        jmiAbrir = new javax.swing.JMenuItem();
        jmiGuardar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jmiSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jmniAcercaDe = new javax.swing.JMenuItem();

        jDialog1.setName("jDialog1"); // NOI18N

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jPopupMenu.setName("jPopupMenu");
        jPopupMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenuPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenuPopupMenuWillBecomeVisible(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EasyReq");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        jbtNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Nuevo.png"))); // NOI18N
        jbtNuevo.setToolTipText("Nuevo documento"); // NOI18N
        jbtNuevo.setFocusable(false);
        jbtNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtNuevo.setName("jbtNuevo"); // NOI18N
        jbtNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtNuevoActionPerformed(evt);
            }
        });
        jToolBar1.add(jbtNuevo);

        jbtAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Abrir.png"))); // NOI18N
        jbtAbrir.setToolTipText("Abrir documento");
        jbtAbrir.setFocusable(false);
        jbtAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtAbrir.setName("jbtAbrir"); // NOI18N
        jbtAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAbrirActionPerformed(evt);
            }
        });
        jToolBar1.add(jbtAbrir);

        jbtGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Guardar.png"))); // NOI18N
        jbtGuardar.setToolTipText("Guardar");
        jbtGuardar.setFocusable(false);
        jbtGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtGuardar.setName("jbtGuardar"); // NOI18N
        jbtGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtGuardarActionPerformed(evt);
            }
        });
        jToolBar1.add(jbtGuardar);

        jSeparator1.setName("jSeparator1"); // NOI18N
        jToolBar1.add(jSeparator1);

        jToolBar2.setFloatable(false);
        jToolBar2.setName("jToolBar2"); // NOI18N

        jbtPortada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/portada.png"))); // NOI18N
        jbtPortada.setToolTipText("Portada");
        jbtPortada.setFocusable(false);
        jbtPortada.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtPortada.setName("jbtPortada"); // NOI18N
        jbtPortada.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jbtPortada);

        jbtNuevoNodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/nuevo_nodo.png"))); // NOI18N
        jbtNuevoNodo.setToolTipText("Nuevo nodo");
        jbtNuevoNodo.setFocusable(false);
        jbtNuevoNodo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtNuevoNodo.setName("jbtNuevoNodo"); // NOI18N
        jbtNuevoNodo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtNuevoNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtNuevoNodoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtNuevoNodo);

        jbtObjetivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Objetivo del sistema.png"))); // NOI18N
        jbtObjetivo.setToolTipText("Nuevo objetivo del sistema");
        jbtObjetivo.setFocusable(false);
        jbtObjetivo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtObjetivo.setName("jbtObjetivo"); // NOI18N
        jbtObjetivo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtObjetivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtObjetivoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtObjetivo);

        jbtConflicto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Conflicto.png"))); // NOI18N
        jbtConflicto.setToolTipText("Nuevo conflicto");
        jbtConflicto.setFocusable(false);
        jbtConflicto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtConflicto.setName("jbtConflicto"); // NOI18N
        jbtConflicto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jbtConflicto);

        jbtParticipante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Empleado.png"))); // NOI18N
        jbtParticipante.setToolTipText("Nuevo participante");
        jbtParticipante.setFocusable(false);
        jbtParticipante.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtParticipante.setName("jbtParticipante"); // NOI18N
        jbtParticipante.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtParticipante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtParticipanteActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtParticipante);

        jbtRequisito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Requisito Funcional.png"))); // NOI18N
        jbtRequisito.setToolTipText("Requisito funcional");
        jbtRequisito.setFocusable(false);
        jbtRequisito.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtRequisito.setName("jbtRequisito"); // NOI18N
        jbtRequisito.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtRequisito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRequisitoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtRequisito);

        jbtnReqInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Informaci√≥n.png"))); // NOI18N
        jbtnReqInfo.setToolTipText("A√±adir requisito de informaci√≥n");
        jbtnReqInfo.setFocusable(false);
        jbtnReqInfo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtnReqInfo.setName("jbtnReqInfo"); // NOI18N
        jbtnReqInfo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtnReqInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnReqInfoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtnReqInfo);

        jbtMatrizRast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Matriz Rastreabilidad.png"))); // NOI18N
        jbtMatrizRast.setToolTipText("Matriz de rastreabilidad");
        jbtMatrizRast.setFocusable(false);
        jbtMatrizRast.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtMatrizRast.setName("jbtMatrizRast"); // NOI18N
        jbtMatrizRast.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jbtMatrizRast);

        jbtnReunion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/reunion.png"))); // NOI18N
        jbtnReunion.setToolTipText("Nueva reuni√≥n");
        jbtnReunion.setFocusable(false);
        jbtnReunion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtnReunion.setName("jbtnReunion"); // NOI18N
        jbtnReunion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtnReunion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnReunionActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtnReunion);

        jSeparator5.setName("jSeparator5"); // NOI18N
        jToolBar2.add(jSeparator5);

        jbtActor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Actor.png"))); // NOI18N
        jbtActor.setToolTipText("Nuevo actor");
        jbtActor.setFocusable(false);
        jbtActor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtActor.setName("jbtActor"); // NOI18N
        jbtActor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jbtActor);

        jbtUseCase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Caso de Uso.png"))); // NOI18N
        jbtUseCase.setToolTipText("Nuevo caso de uso");
        jbtUseCase.setFocusable(false);
        jbtUseCase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtUseCase.setName("jbtUseCase"); // NOI18N
        jbtUseCase.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtUseCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtUseCaseActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtUseCase);

        jbtPaso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Paso.png"))); // NOI18N
        jbtPaso.setToolTipText("Agregar paso");
        jbtPaso.setFocusable(false);
        jbtPaso.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtPaso.setName("jbtPaso"); // NOI18N
        jbtPaso.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtPaso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPasoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtPaso);

        jbtExcepcion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Excepci√≥n.png"))); // NOI18N
        jbtExcepcion.setToolTipText("A√±adir excepci√≥n");
        jbtExcepcion.setFocusable(false);
        jbtExcepcion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtExcepcion.setName("jbtExcepcion"); // NOI18N
        jbtExcepcion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtExcepcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExcepcionActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtExcepcion);

        jbtnGlosario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Glosario.png"))); // NOI18N
        jbtnGlosario.setToolTipText("Nuevo glosario");
        jbtnGlosario.setFocusable(false);
        jbtnGlosario.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtnGlosario.setName("jbtnGlosario"); // NOI18N
        jbtnGlosario.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtnGlosario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGlosarioActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtnGlosario);

        jbtnFich_grafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Imagen.png"))); // NOI18N
        jbtnFich_grafico.setToolTipText("Nueva imagen");
        jbtnFich_grafico.setFocusable(false);
        jbtnFich_grafico.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtnFich_grafico.setName("jbtnFich_grafico"); // NOI18N
        jbtnFich_grafico.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtnFich_grafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnFich_graficoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtnFich_grafico);

        jbtnParrafo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Parrafo.png"))); // NOI18N
        jbtnParrafo.setToolTipText("Agregar p√°rrafo");
        jbtnParrafo.setFocusable(false);
        jbtnParrafo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtnParrafo.setName("jbtnParrafo"); // NOI18N
        jbtnParrafo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtnParrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnParrafoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbtnParrafo);

        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Documento de especificaci√≥n de requisitos");
        jtDocumento.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jtDocumento.setComponentPopupMenu(jPopupMenu);
        jtDocumento.setName("jtDocumento"); // NOI18N
        jScrollPane1.setViewportView(jtDocumento);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jtxpInfo.setName("jtxpInfo"); // NOI18N
        jScrollPane2.setViewportView(jtxpInfo);

        jSplitPane1.setRightComponent(jScrollPane2);

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText("Archivo");
        jMenu1.setName("jMenu1"); // NOI18N

        jmiNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Nuevo.png"))); // NOI18N
        jmiNuevo.setText("Nuevo");
        jmiNuevo.setName("jmiNuevo"); // NOI18N
        jMenu1.add(jmiNuevo);

        jmiAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Abrir.png"))); // NOI18N
        jmiAbrir.setText("Abrir");
        jmiAbrir.setName("jmiAbrir"); // NOI18N
        jMenu1.add(jmiAbrir);

        jmiGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Guardar.png"))); // NOI18N
        jmiGuardar.setText("Guardar");
        jmiGuardar.setName("jmiGuardar"); // NOI18N
        jMenu1.add(jmiGuardar);

        jSeparator2.setName("jSeparator2"); // NOI18N
        jMenu1.add(jSeparator2);

        jmiSalir.setText("Salir");
        jmiSalir.setName("jmiSalir"); // NOI18N
        jmiSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalirActionPerformed(evt);
            }
        });
        jMenu1.add(jmiSalir);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");
        jMenu2.setName("jMenu2"); // NOI18N
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Vista");
        jMenu3.setName("jMenu3"); // NOI18N
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Herramientas");
        jMenu4.setName("jMenu4"); // NOI18N
        jMenuBar1.add(jMenu4);

        jMenu5.setText("Ventana");
        jMenu5.setName("jMenu5"); // NOI18N
        jMenuBar1.add(jMenu5);

        jMenu6.setText("Ayuda...");
        jMenu6.setName("jMenu6"); // NOI18N

        jmniAcercaDe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jmniAcercaDe.setText("Acerca de...");
        jmniAcercaDe.setName("jmniAcercaDe"); // NOI18N
        jmniAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmniAcercaDeActionPerformed(evt);
            }
        });
        jMenu6.add(jmniAcercaDe);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 858, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void a√±ade_a_doc(Generico obj)
    {
        if(obj instanceof Apendice)
            this.getDoc().Crear_Apendice((Apendice)obj);
        else if(obj instanceof Caso_de_uso)
            this.getDoc().Crear_CU((Caso_de_uso)obj);
        else if(obj instanceof Glosario)
            this.getDoc().A√±adir_Glosario((Glosario)obj);
        else if(obj instanceof Imagen)
            this.getDoc().A√±adir_imagen((Imagen)obj);
        else if(obj instanceof Objetivo)
            this.getDoc().Crear_Objetivo((Objetivo)obj);
        else if(obj instanceof Parrafo)
            this.getDoc().A√±adir_Parrafo((Parrafo)obj);
        else if(obj instanceof Participante)
            this.getDoc().Crear_Participante((Participante)obj);
        else if((obj instanceof RFuncional)||(obj instanceof RInformacion))
            this.getDoc().Crear_Req((Requisito)obj);
        else if(obj instanceof Reunion)
            this.getDoc().Crear_Reunion((Reunion)obj);
    }
    
    public void cargar_arbol()
    {
        DefaultMutableTreeNode nodo_raiz=(DefaultMutableTreeNode)this.getArbol().getModel().getRoot(),
                                nuevo_nodo;
        if(this.arb.getRoot().num_hijos()>0)
        {
            for(Nodo aux:this.arb.getRoot().getHijos())
            {
                nuevo_nodo=new DefaultMutableTreeNode(aux.getDato());
                if(aux.getDato() instanceof Caso_de_uso)
                {
                    DefaultMutableTreeNode pasos=new DefaultMutableTreeNode("Pasos"),
                            excepciones=new DefaultMutableTreeNode("Excepciones");
                    nuevo_nodo.add(pasos);
                    for(Evento evt:((Caso_de_uso)aux.getDato()).getPasos())
                    {
                        pasos.add(new DefaultMutableTreeNode(evt));
                    }
                    nuevo_nodo.add(excepciones);
                    for(Evento evt:((Caso_de_uso)aux.getDato()).getExcepciones())
                    {
                        excepciones.add(new DefaultMutableTreeNode(evt));
                    }
                }
                nodo_raiz.add(nuevo_nodo);
                this.carga_arbol_aux(aux,nuevo_nodo);
                this.a√±ade_a_doc(aux.getDato());
                this.a√±adir_cosa(nuevo_nodo);
            }
        }
    }
    public void carga_arbol_aux(Nodo mi_nodo,DefaultMutableTreeNode jt_nodo)
    {
        DefaultMutableTreeNode nodo_nuevo;
        if(mi_nodo.num_hijos()==0)
            return;
        for(Nodo aux:mi_nodo.getHijos())
        {
            nodo_nuevo=new DefaultMutableTreeNode(aux.getDato());
            jt_nodo.add(nodo_nuevo);
            if(aux.getDato() instanceof Caso_de_uso)
                {
                    DefaultMutableTreeNode pasos=new DefaultMutableTreeNode("Pasos"),
                            excepciones=new DefaultMutableTreeNode("Excepciones");
                    nodo_nuevo.add(pasos);
                    for(Evento evt:((Caso_de_uso)aux.getDato()).getPasos())
                    {
                        pasos.add(new DefaultMutableTreeNode(evt));
                    }
                    nodo_nuevo.add(excepciones);
                    for(Evento evt:((Caso_de_uso)aux.getDato()).getExcepciones())
                    {
                        excepciones.add(new DefaultMutableTreeNode(evt));
                    }
                }
            if(aux.num_hijos()>0)
                this.carga_arbol_aux(aux,nodo_nuevo);
            this.a√±ade_a_doc(aux.getDato());
            this.a√±adir_cosa(nodo_nuevo);
        }
    }
    
    
    
    private void jbtUseCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtUseCaseActionPerformed
        // TODO add your handling code here:
        TreePath tp = this.getArbol().getSelectionPath();
        if(tp==null)
            JOptionPane.showMessageDialog(this,"Debes elegir un directorio","Fallo",JOptionPane.ERROR_MESSAGE);
        else
        {
             DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
         DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        if(nodo.isRoot()){
            jfrUseCaseDialog nuevo = new jfrUseCaseDialog(this, nodo_seleccionado,false);
            this.setEnabled(false);
            nuevo.setVisible(true);
            }else {
               
                         try{
                            Apendice Ap=(Apendice)nodo.getUserObject();
                            if(!Ap.isTipo()){
                            jfrUseCaseDialog nuevo = new jfrUseCaseDialog(this, nodo_seleccionado,false);
                            this.setEnabled(false);
                            nuevo.setVisible(true);
                            }else {
                                   JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE); 
                            }
                           }catch(Exception y){
                               JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE);
                           }
                   
            }
        }
    }//GEN-LAST:event_jbtUseCaseActionPerformed

    private void jbtPasoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPasoActionPerformed
        // TODO add your handling code here:
        //a√±adir un paso al caso de uso
        TreePath tp = this.getArbol().getSelectionPath();
        DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        System.out.println(definedClass(nodo.getUserObject()));
        String comparacion = definedClass(nodo.getUserObject());
        if(!comparacion.equals("Caso_de_uso"))
        {
            JOptionPane.showMessageDialog(this,"Debes elegir un Caso de Uso","Fallo",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            try{
                Caso_de_uso CU=(Caso_de_uso)nodo.getUserObject();
                //System.out.println("Esta si es!!!!!");
                jfrPaso Paso=new jfrPaso(this,(DefaultMutableTreeNode)nodo.getChildAt(0),CU,false);
                Paso.setVisible(true);
                this.setEnabled(false);
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,"No has seleccionado un Caso de Uso!!!","Fallo",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbtPasoActionPerformed

    private void jbtExcepcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtExcepcionActionPerformed
        // TODO add your handling code here:
        //a√±adir una excepcion
        TreePath tp = this.getArbol().getSelectionPath();
        DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        System.out.println(definedClass(nodo.getUserObject()));
        String comparacion = definedClass(nodo.getUserObject());
        if(!comparacion.equals("Caso_de_uso"))
        {
            JOptionPane.showMessageDialog(this,"Debes elegir un Caso de uso","Fallo",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            try{
                Caso_de_uso CU=(Caso_de_uso)nodo.getUserObject();
                //System.out.println("Esta si es!!!!!");
                jfrExcepcion Excep=new jfrExcepcion(this,(DefaultMutableTreeNode)nodo.getChildAt(1),CU,false);
                Excep.setVisible(true);
                this.setEnabled(false);
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,"No has seleccionado un Caso de Uso!!!","Fallo",JOptionPane.ERROR_MESSAGE);
            }
        }
}//GEN-LAST:event_jbtExcepcionActionPerformed

    private void jmniAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmniAcercaDeActionPerformed
        // TODO add your handling code here:
        jfrAcercaDe nuevo = new jfrAcercaDe(this);
        nuevo.setVisible(true);
        this.setEnabled(false);
}//GEN-LAST:event_jmniAcercaDeActionPerformed

    private void jbtRequisitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRequisitoActionPerformed
        // TODO add your handling code here:
        TreePath tp=this.getArbol().getSelectionPath();
        if(tp==null)
            JOptionPane.showMessageDialog(this,"Debes elegir un directorio","Fallo",JOptionPane.ERROR_MESSAGE);
        else
        {
                DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
         DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        if(nodo.isRoot()){
            jfrReqFuncionalidad nuevo = new jfrReqFuncionalidad(this, nodo_seleccionado,false);
            this.setEnabled(false);
            nuevo.setVisible(true);
            }else {
               
                         try{
                            Apendice Ap=(Apendice)nodo.getUserObject();
                            if(!Ap.isTipo()){
                            jfrReqFuncionalidad nuevo = new jfrReqFuncionalidad(this, nodo_seleccionado,false);
                            this.setEnabled(false);
                            nuevo.setVisible(true);
                            }else {
                                   JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE); 
                            }
                           }catch(Exception y){
                               JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE);
                           }
                   
            }
        }
    }//GEN-LAST:event_jbtRequisitoActionPerformed

    private void jbtnReqInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnReqInfoActionPerformed
        // TODO add your handling code here:
        TreePath tp=this.getArbol().getSelectionPath();
        if(tp==null)
            JOptionPane.showMessageDialog(this,"Debes elegir un directorio","Fallo",JOptionPane.ERROR_MESSAGE);
        else
        {
           
                DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
         DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        if(nodo.isRoot()){
            jfrReqInformacion nuevo = new jfrReqInformacion(this, nodo_seleccionado,false);
            this.setEnabled(false);
            nuevo.setVisible(true);
            }else {
               
                         try{
                            Apendice Ap=(Apendice)nodo.getUserObject();
                            if(!Ap.isTipo()){
                            jfrReqInformacion nuevo = new jfrReqInformacion(this, nodo_seleccionado,false);
                            this.setEnabled(false);
                            nuevo.setVisible(true);
                            }else {
                                   JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE); 
                            }
                           }catch(Exception y){
                               JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE);
                           }
                   
            }
        }
    }//GEN-LAST:event_jbtnReqInfoActionPerformed

    private void jbtParticipanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtParticipanteActionPerformed
        // TODO add your handling code here:
        TreePath tp=this.getArbol().getSelectionPath();
        if(tp==null)
            JOptionPane.showMessageDialog(this,"Debes elegir un directorio","Fallo",JOptionPane.ERROR_MESSAGE);
        else
        {
              
            DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
         DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        if(nodo.isRoot()){
            jfrParticipante nuevo = new jfrParticipante(this, nodo_seleccionado,false);
            this.setEnabled(false);
            nuevo.setVisible(true);
            }else {
               
                         try{
                            Apendice Ap=(Apendice)nodo.getUserObject();
                            if(!Ap.isTipo()){
                            jfrParticipante nuevo = new jfrParticipante(this, nodo_seleccionado,false);
                            this.setEnabled(false);
                            nuevo.setVisible(true);
                            }else {
                                   JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE); 
                            }
                           }catch(Exception y){
                               JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE);
                           }
                    
            }
        }
    }//GEN-LAST:event_jbtParticipanteActionPerformed

    private void jmiSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jmiSalirActionPerformed

private void jbtObjetivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtObjetivoActionPerformed
    // TODO add your handling code here:
    TreePath tp=this.getArbol().getSelectionPath();
        if(tp==null)
            JOptionPane.showMessageDialog(this,"Debes elegir un directorio","Fallo",JOptionPane.ERROR_MESSAGE);
        else
        {   
            DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
         DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        if(nodo.isRoot()){
            jfrObjetivosSistema nuevo = new jfrObjetivosSistema(this, nodo_seleccionado,false);
            this.setEnabled(false);
            nuevo.setVisible(true);
            }else {
                try{
                    Objetivo obj=(Objetivo)nodo.getUserObject();
                    jfrObjetivosSistema nuevo = new jfrObjetivosSistema(this, nodo_seleccionado,false);
                    this.setEnabled(false);
                    nuevo.setVisible(true);
                }catch(Exception e)
                    {
                         try{
                            Apendice Ap=(Apendice)nodo.getUserObject();
                            if(!Ap.isTipo()){
                            jfrObjetivosSistema nuevo = new jfrObjetivosSistema(this, nodo_seleccionado,false);
                            this.setEnabled(false);
                            nuevo.setVisible(true);
                            }else {
                                   JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz, una Seccion o un objetivo","Fallo",JOptionPane.ERROR_MESSAGE); 
                            }
                           }catch(Exception y){
                               JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz, una Seccion o un objetivo","Fallo",JOptionPane.ERROR_MESSAGE);
                           }
                    }
            }
        }
}//GEN-LAST:event_jbtObjetivoActionPerformed

private void jbtNuevoNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNuevoNodoActionPerformed
// TODO add your handling code here:
    TreePath tp = this.getArbol().getSelectionPath();
    
    
    if(tp==null)
        JOptionPane.showMessageDialog(this,"Debes seleccionar la carpeta Raiz, una seccion o un apendice","Fallo",JOptionPane.ERROR_MESSAGE);
    else
    {   DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
         DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        if(nodo.isRoot()){
            jfrApendice nuevo = new jfrApendice(this, nodo_seleccionado,false);
            this.setEnabled(false);
            nuevo.setVisible(true);
            }else {
                try{
                    Apendice Append=(Apendice)nodo.getUserObject();
                    if(!Append.isTipo()){
                        jfrApendice nuevo = new jfrApendice(this, nodo_seleccionado,false);
                        this.setEnabled(false);
                        nuevo.setVisible(true);
                     }else {
                                   JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE); 
                    }      
                    
                }catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz o una Seccion","Fallo",JOptionPane.ERROR_MESSAGE);
                    }
            }
    }
}//GEN-LAST:event_jbtNuevoNodoActionPerformed

    private void jbtnReunionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnReunionActionPerformed
        // TODO add your handling code here:
        TreePath tp = this.getArbol().getSelectionPath();
        if(tp==null)
            JOptionPane.showMessageDialog(this,"Debes elegir un directorio","Fallo",JOptionPane.ERROR_MESSAGE);
        else
        {   
            
                DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
         DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        if(nodo.isRoot()){
            jfrReunion nuevo = new jfrReunion(this, nodo_seleccionado,doc.getPart_creados(),false);
            this.setEnabled(false);
            nuevo.setVisible(true);
            }else {
               
                         try{
                            Apendice Ap=(Apendice)nodo.getUserObject();
                            if(!Ap.isTipo()){
                            jfrReunion nuevo = new jfrReunion(this, nodo_seleccionado,doc.getPart_creados(),false);
                            this.setEnabled(false);
                            nuevo.setVisible(true);
                            }else {
                                   JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz, una Seccion o un objetivo","Fallo",JOptionPane.ERROR_MESSAGE); 
                            }
                           }catch(Exception y){
                               JOptionPane.showMessageDialog(this,"Debes de Seleccionar la carpeta Raiz, una Seccion o un objetivo","Fallo",JOptionPane.ERROR_MESSAGE);
                           }
                   
            }
        }
    }//GEN-LAST:event_jbtnReunionActionPerformed

    private void jbtnFich_graficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnFich_graficoActionPerformed
        // TODO add your handling code here:
        if(this.getArbol().getSelectionPath()!=null)
        {
            DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
            JFileChooser f=new JFileChooser();
            FileNameExtensionFilter filtro=new FileNameExtensionFilter("Archivo imagen","jpg","png","jpeg","tiff","bmp");
            File[] fich_elegidos;
            File fich=null;
            DefaultMutableTreeNode nodo=null;
            f.addChoosableFileFilter(filtro);
            f.setMultiSelectionEnabled(true);
            f.showOpenDialog(this);
            fich_elegidos=f.getSelectedFiles();
            for(int i=0;i<fich_elegidos.length;i++)
            {
                Imagen nuevo = new Imagen();
                nuevo.addObserver(this);
                nuevo.setFichero(fich_elegidos[i]);
                fich=fich_elegidos[i];
                nodo=new DefaultMutableTreeNode(nuevo);
                nodo_seleccionado.add(nodo);
                this.cosas_creadas.add(nodo);
                this.getDoc().A√±adir_imagen(nuevo);
                nuevo.notificar_observer();
            }
        }
        else
            JOptionPane.showMessageDialog(this,"Debes elegir un directorio","Fallo",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jbtnFich_graficoActionPerformed

    private void jbtnGlosarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGlosarioActionPerformed
        // TODO add your handling code here:
        //Modificado por el excelentisimo se√±or pepe, A√±adida memoria de antecesor y limitaciones a Glosario.
        TreePath tp = this.getArbol().getSelectionPath();
        DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
         DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)tp.getLastPathComponent();
        
        if(tp!=null)
        {	
            try{
                Apendice Append=(Apendice)nodo.getUserObject();
                if(Append.isTipo()){
                jfrGlosario nuevo = new jfrGlosario(this, nodo_seleccionado,false);
            	this.setEnabled(false);
            	nuevo.setVisible(true);
                }else{
                    JOptionPane.showMessageDialog(this,"Debes de Seleccionar un apendice","Fallo",JOptionPane.ERROR_MESSAGE);
                }
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,"Debes de Seleccionar un apendice","Fallo",JOptionPane.ERROR_MESSAGE);
            }
        }
        else
            JOptionPane.showMessageDialog(this,"Debes de Seleccionar un apendice","Fallo",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jbtnGlosarioActionPerformed

    private void jbtnParrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnParrafoActionPerformed
        // TODO add your handling code here:
        if(this.getArbol().getSelectionPath()!=null)
        {
            DefaultMutableTreeNode nodo_seleccionado=(DefaultMutableTreeNode)this.getArbol()
                    .getSelectionPath().getLastPathComponent();
            jfrParrafo nuevo = new jfrParrafo(this, nodo_seleccionado,false);
            this.setEnabled(false);
            nuevo.setVisible(true);
        }
        else
            JOptionPane.showMessageDialog(this,"Debes elegir un directorio","Fallo",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jbtnParrafoActionPerformed

    private void jPopupMenuPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenuPopupMenuWillBecomeVisible
        // TODO add your handling code here:
        this.jPopupMenu.add(this.Nodo);
        this.jPopupMenu.add(this.Editar);
        this.jPopupMenu.add(this.Eliminar);
        TreePath th=this.getArbol().getSelectionPath();
        if(th!=null)
        {
            DefaultMutableTreeNode nodo=(DefaultMutableTreeNode)th.getLastPathComponent();
            if(nodo.getUserObject() instanceof Caso_de_uso)
            {
                this.jPopupMenu.add(this.Paso);
                this.jPopupMenu.add(this.Excepcion);
            }
        }
    }//GEN-LAST:event_jPopupMenuPopupMenuWillBecomeVisible

    private void jPopupMenuPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenuPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        this.jPopupMenu.removeAll();
    }//GEN-LAST:event_jPopupMenuPopupMenuWillBecomeInvisible

    private void jbtGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtGuardarActionPerformed
        // TODO add your handling code here:
        JFileChooser guardar=new JFileChooser();
        guardar.addChoosableFileFilter(new FileNameExtensionFilter("Archivo EasyReq", "erq"));
        guardar.showSaveDialog(this);
        File fich_selec=guardar.getSelectedFile();
        if(fich_selec!=null)
        {
            StringBuilder fich=new StringBuilder(guardar.getSelectedFile().getAbsolutePath());
            if(!fich.toString().endsWith(".erq"))
                fich.append(".erq");
            this.arb.getRoot().borrar_hijos();
            for(DefaultMutableTreeNode aux:this.cosas_creadas)
            {
                try
                {
                    DefaultMutableTreeNode padre=(DefaultMutableTreeNode)aux.getParent();
                    if (padre.equals(this.getArbol().getModel().getRoot()))
                    {
                        this.arb.add_root((Generico)aux.getUserObject());
                    }
                    else
                        this.arb.add(((Generico)((DefaultMutableTreeNode)aux.getParent()).getUserObject()),
                                ((Generico)aux.getUserObject()));
                }catch(Exception e)
                {
                    System.out.println(e);
                    e.printStackTrace();
                }
            }
            try
            {
                ObjectOutputStream oos =
                        new ObjectOutputStream(new FileOutputStream(fich.toString()));
                oos.writeObject(this.arb);
            }catch(Exception e)
            {
                System.out.println(e);
            }     
            this.setModificado(false);
        }
    }//GEN-LAST:event_jbtGuardarActionPerformed

    private void jbtAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser cargar=new JFileChooser();
        cargar.addChoosableFileFilter(new FileNameExtensionFilter("Archivo EasyReq", "erq"));
        cargar.showOpenDialog(this);
        File fich_selec = cargar.getSelectedFile();
        if(fich_selec!=null)
        {
            StringBuilder fich=new StringBuilder(cargar.getSelectedFile().getAbsolutePath());
            if(fich.toString().endsWith(".erq"))
            {
                try {
                ObjectInputStream ois=
                        new ObjectInputStream(new FileInputStream(fich.toString()));
                this.arb=(Arbol)ois.readObject();
            } catch (Exception ex) 
            {
                System.out.println(ex);
            }
            this.cargar_arbol();
            this.update(null,null);
            }
        }
    }//GEN-LAST:event_jbtAbrirActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int resp=-1;
        if(this.isModificado())
        {
            resp=JOptionPane.showConfirmDialog(this,"¬øDesea guardar los cambios?",
                    "Documento modificado",JOptionPane.YES_NO_OPTION);
        }
        if(resp==JOptionPane.YES_OPTION)
        {
            this.jbtGuardarActionPerformed(null);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jbtNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNuevoActionPerformed
        // TODO add your handling code here:
        int resp=-1;
        if(this.isModificado())
        {
            resp=JOptionPane.showConfirmDialog(this,"¬øDesea guardar los cambios?",
                    "Documento modificado",JOptionPane.YES_NO_OPTION);
        }
        if(resp==JOptionPane.YES_OPTION)
            this.jbtGuardarActionPerformed(evt);
        this.cosas_creadas.clear();
        this.arb.getRoot().borrar_hijos();
        ((DefaultMutableTreeNode)this.getArbol().getModel().getRoot()).removeAllChildren();
        this.getDoc().Vaciar_documento();
        this.update(null,null);
    }//GEN-LAST:event_jbtNuevoActionPerformed

    private void EditarActionPerformed(java.awt.event.ActionEvent evt) 
    {
        TreePath th=this.getArbol().getSelectionPath();
        if(th!=null)
        {
            DefaultMutableTreeNode objeto=(DefaultMutableTreeNode) th.getLastPathComponent();
            if(objeto.getUserObject() instanceof Caso_de_uso)
            {
                new jfrUseCaseDialog(this,objeto,true).setVisible(true);
                this.setEnabled(false);
            }
            else if(objeto.getUserObject() instanceof Apendice)
            {
                new jfrApendice(this,objeto,true).setVisible(true);
                this.setEnabled(false);
            }
            else if(objeto.getUserObject() instanceof Evento)
            {
                Evento ev=(Evento) objeto.getUserObject();
                if(!ev.isTipo())
                {
                    //editar paso
                    new jfrPaso(this,objeto,null,true).setVisible(true);
                    this.setEnabled(false);
                }
                else
                {
                    //editar Excepcion
                    Caso_de_uso cu=(Caso_de_uso)((DefaultMutableTreeNode)objeto.getParent()
                            .getParent()).getUserObject();
                    new jfrExcepcion(this, objeto,cu,true).setVisible(true);
                    this.setEnabled(false);
                }
            }
            else if(objeto.getUserObject() instanceof Glosario)
            {
                new jfrGlosario(this, objeto,true).setVisible(true);
                this.setEnabled(false);
            }
            else if(objeto.getUserObject() instanceof Objetivo)
            {
                new jfrObjetivosSistema(this, objeto,true).setVisible(true);
                this.setEnabled(false);
            }
            else if(objeto.getUserObject() instanceof Parrafo)
            {
                new jfrParrafo(this, objeto,true).setVisible(true);
                this.setEnabled(false);
            }
            else if(objeto.getUserObject() instanceof Participante)
            {
                new jfrParticipante(this, objeto,true).setVisible(true);
                this.setEnabled(false);
            }
            else if(objeto.getUserObject() instanceof RFuncional)
            {
                new jfrReqFuncionalidad(this, objeto,true).setVisible(true);
                this.setEnabled(false);
            }
            else if(objeto.getUserObject() instanceof RInformacion)
            {
                new jfrReqInformacion(this, objeto,true).setVisible(true);
                this.setEnabled(false);
            }
            else if(objeto.getUserObject() instanceof Reunion)
            {
                new jfrReunion(this, objeto,this.getDoc().getPart_creados(),true).setVisible(true);
                this.setEnabled(false);
            }
        }
    }                                            
    
    private void EliminarActionPerformed(ActionEvent evt)
    {
        TreePath th=this.getArbol().getSelectionPath();
        if(th!=null)
        {
            if(!th.getLastPathComponent().equals(this.getArbol().getModel().getRoot()))
            {
                DefaultMutableTreeNode o=(DefaultMutableTreeNode)th.getLastPathComponent();
                this.cosas_creadas.remove(o);
                this.getDoc().Eliminar(o.getUserObject());
                o.removeFromParent();
                this.arb.Eliminar_nodo((Generico)o.getUserObject());
                ((Generico)o.getUserObject()).notificar_observer();
            }
        }
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try
                {
                   UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }
                catch(Exception e)
                {
                   e.printStackTrace();
                }
                finally
                {
                   new Interfaz().setVisible(true);
                }
                
            }
        });
    }

    public JTree getArbol()
    {
        return this.jtDocumento;
    }

    public void a√±adir_cosa(DefaultMutableTreeNode aux)
    {
        this.cosas_creadas.add(aux);
    }

    public StringBuffer mostrar_casos()
    {
        StringBuffer str=new StringBuffer("");
        DefaultMutableTreeNode nodo_aux=null,nodo_aux2=null,nodo_aux3=null;
        for(int i=0;i<this.cosas_creadas.size();i++)
        {
            nodo_aux=this.cosas_creadas.get(i);
            //System.out.println(nodo_aux.getUserObject());
            str.append(nodo_aux.getUserObject()+"\n");
            for(int j=0;j<nodo_aux.getChildCount();j++)
            {
                nodo_aux2=(DefaultMutableTreeNode)nodo_aux.getChildAt(j);
                //System.out.println("   "+nodo_aux2.getUserObject());
                str.append("   "+nodo_aux2.getUserObject()+"\n");
                if(nodo_aux2.getChildCount()>0)
                {
                    for(int z=0;z<nodo_aux2.getChildCount();z++)
                    {
                        nodo_aux3=(DefaultMutableTreeNode)nodo_aux2.getChildAt(z);
                        //System.out.println("      "+nodo_aux3.getUserObject());
                        str.append("      "+nodo_aux3.getUserObject()+"\n");
                    }
                }
            }
            str.append("---------------------------------------------\n");
        }
        //System.out.println("---------------------------------------------");
        return str;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog jDialog1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton jbtAbrir;
    private javax.swing.JButton jbtActor;
    private javax.swing.JButton jbtConflicto;
    private javax.swing.JButton jbtExcepcion;
    private javax.swing.JButton jbtGuardar;
    private javax.swing.JButton jbtMatrizRast;
    private javax.swing.JButton jbtNuevo;
    private javax.swing.JButton jbtNuevoNodo;
    private javax.swing.JButton jbtObjetivo;
    private javax.swing.JButton jbtParticipante;
    private javax.swing.JButton jbtPaso;
    private javax.swing.JButton jbtPortada;
    private javax.swing.JButton jbtRequisito;
    private javax.swing.JButton jbtUseCase;
    private javax.swing.JButton jbtnFich_grafico;
    private javax.swing.JButton jbtnGlosario;
    private javax.swing.JButton jbtnParrafo;
    private javax.swing.JButton jbtnReqInfo;
    private javax.swing.JButton jbtnReunion;
    private javax.swing.JMenuItem jmiAbrir;
    private javax.swing.JMenuItem jmiGuardar;
    private javax.swing.JMenuItem jmiNuevo;
    private javax.swing.JMenuItem jmiSalir;
    private javax.swing.JMenuItem jmniAcercaDe;
    private javax.swing.JTree jtDocumento;
    private javax.swing.JTextPane jtxpInfo;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the doc
     */
    public Documento getDoc() {
        return doc;
    }

    /**
     * @param doc the doc to set
     */
    public void setDoc(Documento doc) {
        this.doc = doc;
    }

    public void update(Observable arg0, Object arg1)
    {
        this.setModificado(true);
        
//        if(this.doc.elementos_totales() == 0)
//        {
//            System.out.println("Vac√≠o");
//            this.jtxpInfo.setText("");
//            jtDocumento.updateUI();
//            return;
//        }
        
        System.out.println("Actualizar"); 
        //StringBuffer str=this.mostrar_casos();
        
        //this.jtxpInfo.updateUI();
        //System.out.println(str);
        
        try
        {
            toXML();
            StringBuilder str=this.mostrar_casos_xml();
            this.jtxpInfo.setText(str.toString());
            File fichHTML = new java.io.File("resultado.html");
            fichHTML.createNewFile();
            fichHTML.setWritable(true);
            
            FileWriter fr = new FileWriter(fichHTML);
            fr.write(jtxpInfo.getText());
            fr.flush();
            fr.close();
        }
        catch(IOException e)
        {

        }
        catch(Exception e)
        {
            jtxpInfo.setContentType("text/html");
            jtxpInfo.setText("<br/>");
            jtxpInfo.updateUI();
        }
        finally{jtDocumento.updateUI();}
    }

    public StringBuilder mostrar_casos_xml()
    {
        StringBuilder ret = new StringBuilder();
        try
        {
        
            String xmlOrigen = "resultado.xml";
            String xslOrigen = "src/clases/XMLEasyReq.xsl";
            Source xmlSource = new StreamSource(new File(xmlOrigen));
            Source xsltSource = new StreamSource(new File(xslOrigen));
            StringWriter cadenaSalida = new StringWriter();
            Result bufferResultado = new StreamResult(cadenaSalida);
            TransformerFactory factoriaTrans = TransformerFactory.newInstance();
            Transformer transformador = factoriaTrans.newTransformer(xsltSource);
            transformador.transform(xmlSource, bufferResultado);

            //jtxpDocumento.setText(cadenaSalida.toString());
            ret.append(cadenaSalida.toString());
            //guardar html en fichero f√≠sico
        }
        catch(Exception e)
        {
            System.out.println("Excepcion en mostrar_casos_xml: "+e.getMessage());
        }

        return ret;
    }
    public void toXML() throws Exception
    {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

            DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) jtDocumento.getModel().getRoot();
            DocumentBuilder builder = null;
        try {
            builder = factory.newDocumentBuilder();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
            DOMImplementation implementation = builder.getDOMImplementation();
            Document document = implementation.createDocument(null, "xml", null);
            Element raiz = document.createElement("Documento");

            document.setXmlVersion("1.0");
            document.getDocumentElement().appendChild(raiz);

            /*A partir de aqu√≠ se recorrer√° el √°rbol*/
            if(nodo.isLeaf())
                throw new Exception("No hay ning√∫n nodo en la ra√≠z");
            try
            {
                completarArbol(raiz, document, nodo);
            }
            catch(Exception ex)
            {}
            /*Fin del recorrido del √°rbol*/

            Source source = new DOMSource(document);
            Result result = new StreamResult(new java.io.File("resultado.xml"));
            Result console = new StreamResult(System.out);

            try
            {
                Transformer transformer = TransformerFactory.newInstance().newTransformer();
                transformer.transform(source, result);
                transformer.transform(source, console);
            }
            catch(Exception ex)
            {
            }

    }

    private String definedClass(Object a)
    {
        /*
         * Con este m√©todo busco que se pueda saber si la clase que contiene
         * el nodo de un √°rbol ha sido ya definido.
         * El m√©todo reaccionar√° al encontrar una clase que herede de
         * la clase Gen√©rico
         */
        if(a instanceof Caso_de_uso)
        {
            return "Caso_de_uso";
        }
        if(a instanceof Evento)
        {
            return "Evento";
        }
        if(a instanceof RFuncional)
        {
            return "RFuncional";
        }
        if(a instanceof RInformacion)
        {
            return "RInformacion";
        }
        if(a instanceof Objetivo)
        {
            return "Objetivo";
        }
        if(a instanceof String)
        {
            return "String";
        }
        if(a instanceof Participante)
        {
            return "Participante";
        }
        if(a instanceof Reunion)
        {
            return "Reunion";
        }
        if(a instanceof Apendice)
        {
            return "Apendice";
        }
        if(a instanceof Glosario)
        {
            return "Glosario";
        }
        if(a instanceof Parrafo)
        {
            return "Parrafo";
        }
        if(a instanceof Imagen)
        {
            return "Imagen";
        }

        return null;
        //Si se devuelve null es que estamos en una carpeta
    }

    private void completarArbol(Element raiz, Document doc, DefaultMutableTreeNode nodo) throws Exception
    {
        /*
         * El recorrido se har√° en profundidad para tener siempre la estructura
         * del √°rbol. Obviamente, este m√©todo es RECURSIVO
         */

        if(nodo == null)
            return;

        Object value = nodo.getUserObject();
        String clase = definedClass(value);

        if(clase == null)
        {
            //Es un elemento alistado de las clases, cada elemento recibir√°
            //un tratamiento
            System.out.println(value);
            return;
        }

        if(nodo.getChildCount()>=0)
        {
            int j = 0;
            for(Enumeration e = nodo.children() ; e.hasMoreElements(); j++)
            {
                //Comenzando a tratar los elementos
                Element elm = null;
                DefaultMutableTreeNode actual = (DefaultMutableTreeNode) nodo.getChildAt(j);

                if(definedClass(actual.getUserObject()).equals("Caso_de_uso"))
                {
                    elm = XMLParser.setCasoDeUso((Caso_de_uso) actual.getUserObject(), doc);
                }

                if(definedClass(actual.getUserObject()).equals("RFuncional"))
                {
                    elm = XMLParser.setRecFun((RFuncional) actual.getUserObject(), doc);
                }

                if(definedClass(actual.getUserObject()).equals("String"))
                {
                    //elm = XMLParser.setString(actual.getUserObject().toString(), doc);
                }
                
                if(definedClass(actual.getUserObject()).equals("Participante"))
                {
                    elm = XMLParser.setParticipante((Participante)actual.getUserObject(), doc);
                }
                
                if(definedClass(actual.getUserObject()).equals("Objetivo"))
                {
                    elm = XMLParser.setObjetivo((Objetivo) actual.getUserObject(), doc);
                }
                if(definedClass(actual.getUserObject()).equals("RInformacion"))
                {
                    elm = XMLParser.setRecInf((RInformacion) actual.getUserObject(), doc);
                }
                if(definedClass(actual.getUserObject()).equals("Reunion"))
                {
                    elm = XMLParser.setReunion((Reunion) actual.getUserObject(), doc);
                }
                if(definedClass(actual.getUserObject()).equals("Apendice"))
                {
                    elm = XMLParser.setApendice((Apendice) actual.getUserObject(), doc);
                }
                if(definedClass(actual.getUserObject()).equals("Glosario"))
                {
                    elm = XMLParser.setGlosario((Glosario) actual.getUserObject(), doc);
                }
                if(definedClass(actual.getUserObject()).equals("Parrafo"))
                {
                    elm = XMLParser.setParrafo((Parrafo) actual.getUserObject(), doc);
                }
                if(definedClass(actual.getUserObject()).equals("Imagen"))
                {
                    Imagen nueva = (Imagen) actual.getUserObject();
                    elm = XMLParser.setImagen(nueva.getFichero(), doc);
                }

                if(elm != null)
                {
                    raiz.appendChild(elm);
                }
                
                completarArbol(raiz, doc, (DefaultMutableTreeNode) e.nextElement());
                
            }
        }
    }

    /**
     * @return the modificado
     */
    public boolean isModificado() {
        return modificado;
    }

    /**
     * @param modificado the modificado to set
     */
    public void setModificado(boolean modificado) {
        this.modificado = modificado;
    }

}
